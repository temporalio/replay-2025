import { basename, join } from 'node:path';
import { Project } from 'ts-morph';
import { ContentType } from './content-type.js';

/**
 * @typedef {import('contentful-management').Collection} Collection
 * @typedef {import('contentful-management').ContentType} ContentfulContentType
 */

/**
 * Create a new constant.
 * @param {string} name
 * @param {string} initializer
 * @param {boolean} isExported
 * @returns {import('ts-morph').VariableStatement}
 */
const declareConst = (name, initializer, isExported = false) => ({
  declarationKind: 'const',
  isExported,
  declarations: [{ name, initializer }],
});

/** @type {Readonly<{ accessToken: string, environmentId: string, space: string }>} */
const environmentVariables = {
  accessToken: 'CONTENTFUL_ACCESS_TOKEN',
  space: 'CONTENTFUL_SPACE_ID',
};

/**
 * @params {Project} project
 */
export class ContentfulGenerator {
  project = new Project({
    tsConfigFilePath: 'tsconfig.json',
    skipAddingFilesFromTsConfig: true,
  });

  /** @type Map<string, ContentType> */
  contentTypes = new Map();

  /**
   *
   * @param {import('contentful-management').Space} space
   * @param {import('contentful-management').Environment} environment
   * @param {ContentfulContentType} contentTypes
   * @param {string} destination
   */
  constructor(space, environment, contentTypes, destination) {
    this.space = space;
    this.environment = environment;
    this.destination = destination;

    for (const contentType of contentTypes.items) {
      this.addContentType(contentType);
    }
  }

  /**
   * Add a content type to the generator.
   * @param {import('contentful-management').ContentType} contentType
   */
  addContentType(contentType) {
    const type = new ContentType(this, contentType);
    this.contentTypes.set(type.id, type);
  }

  /**
   * Get a content type by its ID.
   * @param {string} id
   * @returns {ContentType | undefined}
   */
  getContentType(id) {
    return this.contentTypes.get(id);
  }

  /**
   * Get all files generated by the generator.
   * @returns {string[]}
   */
  get files() {
    return Array.from(this.contentTypes.values()).map((contentType) => contentType.fullFilePath);
  }

  async generate(filename = join(this.destination, 'index.ts')) {
    const { project, contentTypes } = this;

    for (const contentType of contentTypes.values()) {
      contentType.generate();
    }

    const client = project.createSourceFile(filename, '', {
      overwrite: true,
    });

    client.addImportDeclaration({
      moduleSpecifier: '$env/static/private',
      namedImports: Object.values(environmentVariables).map((name) => ({ name })),
    });

    client.addImportDeclaration({
      moduleSpecifier: 'contentful',
      namedImports: [
        { name: 'createClient' },
        { name: 'EntriesQueries', isTypeOnly: true },
        { name: 'EntryCollection', isTypeOnly: true },
      ],
    });

    for (const ct of this.contentTypes.values()) {
      const file = ct.fileName;
      const moduleSpecifier = `./${basename(file, '.ts')}`;

      client.addImportDeclaration({
        moduleSpecifier,
        namedImports: [
          {
            name: ct.skeleton.name,
            alias: ct.name,
            isTypeOnly: true,
          },
        ],
      });

      client.addExportDeclaration({
        moduleSpecifier,
      });
    }

    client.addTypeAlias({
      name: 'ContentType',
      type: Array.from(contentTypes.values())
        .map((contentType) => `'${contentType.id}'`)
        .join(' | '),
      isExported: true,
    });

    for (const [name, value] of Object.entries(environmentVariables)) {
      client.addVariableStatement(declareConst(name, value));
      client.addStatements(
        `\nif (!${name}) { throw new Error('Missing environment variable: ${value}'); }\n`,
      );
    }

    client.addVariableStatement(
      declareConst(
        'client',
        `createClient({ ${Object.keys(environmentVariables).join(', ')} })`,
        true,
      ),
    );

    for (const c of contentTypes.values()) {
      const { name, id } = c;
      client.addVariableStatement(
        declareConst(
          `get${name}Entries`,
          `(query: Omit<EntriesQueries<${name}, undefined>, 'content_type'> = {}) => client.getEntries<${name}>({ ...query, content_type: '${id}'})`,
          true,
        ),
      );
    }

    await this.project.save();
  }
}
