import { join } from 'node:path';
import { Project } from 'ts-morph';

import { ContentType } from '../content-type/index.js';

import {
  environmentVariables,
  enviromentVariablesImportDeclaration,
} from './environment-variables.js';

/**
 * @typedef {import('contentful-management').Collection} Collection
 * @typedef {import('contentful-management').ContentType} ContentfulContentType
 */

/**
 * @params {Project} project
 */
export class ContentfulGenerator {
  project = new Project({
    tsConfigFilePath: 'tsconfig.json',
    skipAddingFilesFromTsConfig: true,
  });

  /** @type Map<string, ContentType> */
  contentTypes = new Map();

  /**
   *
   * @param {import('contentful-management').Space} space
   * @param {import('contentful-management').Environment} environment
   * @param {ContentfulContentType} contentTypes
   * @param {string} destination
   */
  constructor(space, environment, contentTypes, destination, filename = 'index.ts') {
    this.space = space;
    this.environment = environment;
    this.destination = destination;
    this.filename = filename;

    for (const contentType of contentTypes.items) {
      this.addContentType(contentType);
    }
  }

  /**
   * Add a content type to the generator.
   * @param {import('contentful-management').ContentType} contentType
   */
  addContentType(contentType) {
    const type = new ContentType(this, contentType);
    this.contentTypes.set(type.id, type);
  }

  /**
   * Get a content type by its ID.
   * @param {string} id
   * @returns {ContentType | undefined}
   */
  getContentType(id) {
    return this.contentTypes.get(id);
  }

  /**
   * Get all files generated by the generator.
   * @returns {string[]}
   */
  get files() {
    return Array.from(this.contentTypes.values()).map((contentType) => contentType.path('.ts'));
  }

  get path() {
    return join(this.destination, this.filename);
  }

  async generate() {
    const { project, contentTypes } = this;

    for (const contentType of contentTypes.values()) {
      contentType.generate();
    }

    const client = project.createSourceFile(
      this.path,
      '/** Do not modify. This file was automatically generated. */',
      {
        overwrite: true,
      },
    );

    client.addImportDeclaration(enviromentVariablesImportDeclaration);

    client.addImportDeclaration({
      trailingTrivia: (writer) => writer.blankLine(),
      moduleSpecifier: 'contentful',
      namedImports: [
        { name: 'createClient' },
        { name: 'EntriesQueries', isTypeOnly: true },
        { name: 'EntrySkeletonType', isTypeOnly: true },
      ],
    });

    for (const ct of this.contentTypes.values()) {
      const moduleSpecifier = `./${ct.filename}`;

      client.addImportDeclaration({
        moduleSpecifier,
        namedImports: [
          {
            name: ct.skeleton.name,
            alias: ct.name,
            isTypeOnly: true,
          },
        ],
      });

      client.addExportDeclaration({
        moduleSpecifier,
      });
    }

    client.addTypeAlias({
      name: 'ContentfulEntries',
      typeParameters: [{ name: 'C', constraint: 'EntrySkeletonType' }],
      type: `Omit<EntriesQueries<C, undefined>, 'content_type'>`,
    });

    client.addTypeAlias({
      name: 'ContentType',
      type: Array.from(contentTypes.values())
        .map((contentType) => `'${contentType.id}'`)
        .join(' | '),
      isExported: true,
    });

    client.addVariableStatement({
      declarationKind: 'const',
      declarations: [
        {
          name: 'client',
          initializer: (writer) => {
            writer.writeLine('createClient({');
            for (const [name, value] of Object.entries(environmentVariables)) {
              writer.indent().write(`${name}: ${value},`);
            }
            writer.writeLine('});');
          },
        },
      ],
    });

    for (const c of contentTypes.values()) {
      const { name, id } = c;
      const variable = client.addVariableStatement({
        isExported: true,
        declarationKind: 'const',
        declarations: [
          {
            name: `get${name}Entries`,
            initializer: (writer) => {
              writer.writeLine(`(query: ContentfulEntries<${name}> = {}) => {`);
              writer
                .indent()
                .writeLine(
                  `return client.getEntries<${name}>({ ...query, content_type: '${id}'});`,
                );
              writer.writeLine(`}`).blankLine();
            },
          },
        ],
      });

      variable.addJsDoc({
        description:
          `Get all of the \`${name}\` entries from Contentful. ${c.contentType.description}`.trim(),
      });
    }

    await this.project.save();
  }
}
